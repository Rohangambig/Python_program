class Node:
    def __init__(self,data = None):
        self.data = data
        self.left = None
        self.right = None
class LinkedList:
    def __init__(self):
        self.head = None
    def InsertNode(self,data):
        if self.head is None:
            self.head = Node(data)
            return
        new_node = Node(data)
        current_node = self.head
        while current_node:
            if data < current_node.data:
                if current_node.left is None:
                    current_node.left = new_node
                    break
                else:
                    current_node = current_node.left
                    
            elif data > current_node.data:
                if current_node.right is None:
                    current_node.right = new_node
                    break
                else:
                    current_node = current_node.right
        
    def Inorder(self):
        if self.head is None:
            return 
        else:
            self.InorderTraversal(self.head)

    def InorderTraversal(self,current_node):
        if current_node:
            self.InorderTraversal(current_node.left)
            print(current_node.data)
            self.InorderTraversal(current_node.right)
       
    def MAxDepth(self):
        if self.head is None:
            return
        else:
            print("Maximum depth of a tree is",self.FindDepth(self.head))
    def FindDepth(self,current_node):
        if current_node is None:
            return 0
        return 1+max(self.FindDepth(current_node.left),self.FindDepth(current_node.right))
        
            

L  = LinkedList()
L.InsertNode(4)
L.InsertNode(5)
L.InsertNode(6)
L.InsertNode(7)
L.InsertNode(8)

L.Inorder()
L.MAxDepth()
        
        
        
        
        
        
        
        
        
        
        
        
        
        
